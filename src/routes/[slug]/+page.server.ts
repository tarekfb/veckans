import { formatDate } from '../../utils';
import { fetchPosts } from '../../api';
import { error } from '@sveltejs/kit';

export const config = {
    isr: {
        // Expiration time (in seconds) before the cached asset will be re-generated by invoking the Serverless Function.
        // Setting the value to `false` means it will never expire.
        expiration: 300,
    }
};

export const load = async ({ params, parent }) => {
    const findPost = (posts: RawPost[], date: string): RawPost | undefined => {
        const foundChild = posts.find((child) => {
            const mmddyy = formatDate(child.data.created);
            return mmddyy === date;
        });

        return foundChild;
    };

    const { posts, commentSections } = await parent();
    const post = findPost(posts, params.slug);

    if (!post) {
        throw new Error('Post not found or doesnt exist yet')
    };
    if (post.data.link_flair_richtext[0].t !== 'Positiva Nyheter') {
        console.error('Link flair rich text not matching "Positiva Nyheter"');
        error(500, "Link flair mismatch");
    }

    const commentsWithParent = commentSections.find(
        (section) => section.parent === post.data.id,
    );
    if (!commentsWithParent) {
        console.error(`Missing comment section for post ${post.data.id}`);
        error(500, `Missing comments`);
    }

    return {
        slug: params.slug,
        comments: commentsWithParent.comments,
        post,
    }
}

export const entries: import('./$types').EntryGenerator = async () => {
    const posts = await fetchPosts();
    const dates = posts.map((post) => ({ slug: formatDate(post.data.created) }));
    return dates;
};
